Trabalhando com Collections Java - Stream


ordem aleatoria   --> HashMap
ordem de insersão --> LinkedHashMap
organizar por id  --> TreeMap, passando um dicionario como argumento


existem dois tipos de stream:
	operacoes intermediarias
		pode encadear várias operações e retorna uma stream
			op1().op2().op3() --> isso é encadear operações
	operacoes terminais
		só pode usar uma operação, retorna valor ou objeto
			op1() --> so pode ser usado assim (?)


Nota: Consumer é uma interface funcional

Analisar: ExerciciosStreamAPI.java

Operacao collect: "pegua algo de algum lugar e coleta para colocar em outro lugar"

Obs.: SAM (Single Abstract Method) interface com um único método abstrato





------------> Exercicios <---------------
usando operacoes intermediarias da stream
-----------------------------------------


List<String> numerosAleatorios = Arrays.asList("1", "0", "4", "1", "2", "3", "9", "6", "5");



// Imprimir todos os lementos dessa lista de String


----> parte 1 - usando interface funcional (Consumer)

numerosAleatorios.stream().forEach(new Consumer<String>() {
	@Override
	public void accept(String s) {
		System.out.println(s);
	}
});


----> parte 2 - simplificando para Lambda Expression

numerosAleatorios.stream()
	.forEach(s -> System.out.println(s));


----> parte 3 - simplificando lambda, removendo operacao stream
numerosAleatorios.forEach(s -> System.out.println(s));


----> parte 4 - simplificando ainda mais para Reference Method

numerosAleatorios.forEach(System.out::println);





// Pegando os 5 primeiros numeros e colocando dentro de um Set


----> usando diretamente Reference Method

numerosAleatorios.stream()
	.limit(5)
	.collect(Collectors.toSet())
	.forEach(System.out::println);


// Podemos guardar esses 5 valores em uma variavel Set por causa 
// do metodo toSet da classe Collectors

Set<String> numerosAleatorios5PrimeirosNaoRepetidos = numerosAleatorios.stream()
	.limit(5)
	.collect(Collectors.toSet());





// Transformando lista de string ("1","2","3") em lista de inteiro (1,2,3)

// Vai continuar sendo uma list, porém de números inteiros.


----> parte 1 - usando Functional Interface

numerosAleatorios.stream()
	.map(new Functon<String, Integer>() {
		@Override
		public Integer apply(String s) {
			return Integer.parseInt(s);
		}
	});


----> parte 2 - simplificando para Lambda Expression

numerosAleatorios.stream()
	.map(s -> Integer.parseInt(s));


----> parte 3 - simplificando ainda mais para Reference Method

numerosAleatorios.stream()
	.map(Integer::parseInt);


----> parte 4 - coletando os numeros inteiros para colocar numa List

numerosAleatorios.stream()
	.map(Integer::parseInt)
	.collect(Collectors.toList());
	
//	.forEach(System.out::println);


----> parte 5 - guardando os numeros inteiros em uma List

List<Integer> numerosAleatoriosInteiros = numerosAleatorios.stream()
	.map(Integer::parseInt)
	.collect(Collectors.toList());





// Pegar numeros pares maiores que 2 e colocar em um alista


List<Integer> listParesMaioresQue2 = numerosAleaorios.stream()
	.map(Integer::parseInt)
	.filter(new Predicate<Integer>() {
		@Override
		public boolean test(Integer i) {
			if (i %2 == 0 && i > 2) return true
			return false;
		}
	})
	.collect(Collections.toList());


----> simplicicando para Lambda Expression

List<Integer> listParesMaioresQue2 = numerosAleaorios.stream()
	.map(Integer::parseInt)
	.filter(i -> (i % 2 == 0 && i > 2))
	.collect(Collectors.toList());





// Mostrando a media dos numeros


----> parte 1 - usando Functional Interface

numerosAleatorios.stream()
	.mapToInt(new ToIntFunction<String>() {
		@Override
		public int applyAsInt(String s) {
			return Integer.parseInt(s);
		}
	});


---> parte 2 - simplificando para Lambda Expression

numerosAleatorios.stream()
	.mapToInt(s -> Integer.parseInt(s));


---> parte 3 - simplificando para Reference Method

numerosAleatorios.stream()
	.mapToInt(Integer::parseInt);





// Retornando media


numerosAleatorios.stream()
	.mapToInt(Integer::parseInt)
	.average()
	.ifPresent(new DoubleConsumer() {
		@Override
		public void accept(double v) {
			System.out.println(v);
		}
	});


----> simplificando para Lambda Expression

numerosAleatorios.stream()
	.mapToInt(Integer::parseInt)
	.average()
	.ifPresent(v -> System.out.println(v));


----> simplificando para Reference Method

numerosAleatorios.stream()
	.mapToInt(Integer::parseInt)
	.average()
	.ifPresent(System.out::println);





// Removendo após transformar para inteiros


----> usando predicate (estudar)

numerosAleatoriosInteiros.removeIf(new Predicate<Integer>() {
	@Override
	public boolean test(Integer i) {
		if (i %2 != 0) return true;
		return false;
	}
});


----> simplificando para Lambda Expression

numerosAleatoriosInteiros.removeIf(inteiro -> (inteiro % 2 != 0));


-------> resolver exercicios <-------
https://github.com/cami-la/curso-dio-intro-collections