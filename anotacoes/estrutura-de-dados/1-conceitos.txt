Exemplo com primitivos, valor por cópia

//exemplo com primitivos, parâmetro por valor (copia)
public class TesteValor{
	public static void main(String[] args) {
		int intA = 1;
		int intB = intA;
		
		System.out.println("intA = " + intA + " e intB = " + intB);
		intA = 2;
		System.out.println("intA = " + intA + " e intB = " + intB);
	}
}


>>>>>>>>>>>>===========================================<<<<<<<<<<<<<<<
>>>>>>>>>>>> Exemplo com objetos, valor por referência <<<<<<<<<<<<<<<
>>>>>>>>>>>>===========================================<<<<<<<<<<<<<<<

public class TesteReferencia{
	private Integer num;
	
	public TesteReferencia(){}
	
	public TesteReferencia(Integer num){
		this.num = num;
	}
	
	public void setNum(Integer num){
		this.num = num;
	}
	
	public Integer getNum(){
		return num;
	}
	
	@Override
	public String toString(){
		return "Numero: " + this.getNum();
	}
}

public class MainTesteReferencia{
	public static void main(String[] args){
		TesteReferencia obj1 = new TesteReferencia(1);
		TesteReferencia obj2 = obj1;
		
		System.out.println(obj1);
		obj2.setNum(2);
		Systemm.out.println(obj2);
	}
}



tema dark não dá pra ver nada... usem tema claro nas aulas (feedback)

lista encadeada simples
int -> int -> null

public class No{
	private String conteudo;
	private No proximoNo;
	
	public No(String conteudo, No proximoNo){
		this.conteudo = conteudo;
		this.proximoNo = null;
	}
	
	get e set
	
	tostring
		so com o conteudo
}


public class Main{
	public static void main(String[] args) {
		No no1 = new No('conteudo no1');
		No no2 = new No('conteudo no2');
		
		//encadeamento do no1 com no2
		no1.setProximoNo(no2);
		
		No no3 = new No('conteudo no3');
		no2.setProximoNo(no3);
		
		No no4 = new No('ocnteudo no4');
		no3.setProximoNo(no4);
		
		System.out.println(no1);
		System.out.println(no1.getProximoNo());
		
		System.out.println(no1);
		System.out.println(no1.getProximoNo());
		System.out.println(no1.getProximoNo().getProximoNo().getProximoNo());
		System.out.println(no1.getProximoNo().getProximoNo().getProximoNo().getProximoNo());
	}
}


>>>>>>>>>>>>===========================================<<<<<<<<<<<<<<<
>>>>>>>>>>>>                 Generics                  <<<<<<<<<<<<<<<
>>>>>>>>>>>>===========================================<<<<<<<<<<<<<<<


Lista<String) minhaLista = new Lista<>();
public class Lista<T>{
	private T t;
	..
	..
}


contexto:
 - evitar casting excessivo
 - evitar codigo redundantes
 - encontrar erros em tempo de complicação
 - introduzido desde o java se 5.0

Wildcards
 - Unknown Wildcard
 - Bounded Wildcard



Unknown Wildcard

//a classe precisa ter o toString implementado para mostrar os dados
//senao o endereco de memoria do objeto sera apresentada no console
public void imprimirLista(List<?> lista){
	for(Object obj : lista){
		print(obj)
	}
}
List<Aluno> minhaLista = new List<Aluno>(); //new List ou new ArrayList?
imprimirLista(minhaLista);



UpperBounded Wildcard

//so pode passar lista de Pessoa e herdeiros de Pessoa
public void imprimirLista(List<? extends Pessoa> listaPessoas){
	for(Pessoa p : listaPessoas){
		print(p)
	}
}
List<Aluno> minhaLista = new List<Aluno>(); //new List ou new ArrayList?
imprimirLista(minhaLista);



LowerBounded Wildcard

//so aceita Pessoa, seus irmaos ou superiores, qualquer filho de Pessoa
//nao sera aceito por este metodo
public void imprimirLista(List<? super Pessoa> listaPessoas){
	for Pessoa p : listaPessoas){
		print(p)
	}
}
List<Aluno> minhaLista = new List<Aluno>(); //new List ou new ArrayList?
imprimirLista(minhaLista);


Convenção

K - para "Key", exemplo : Map<K,V>
V - para "Value", exemplo : Map<K,V>
E - para "Element", exemplo : List<E>
T - para "Type", exemplo : Collections#addAll
? - quando genérico


>>>>>>>>>>>>===========================================<<<<<<<<<<<<<<<
Refatorar classe 'No' para aceitar qualquer tipo de objeto e não
somente do objetos do tipo String
>>>>>>>>>>>>===========================================<<<<<<<<<<<<<<<

public class No<T> {
	private T conteudo;
	private No<T> proximoNo = null;
	//...
}

//implementacao
public class No<T> {
	private T conteudo;
	private No proximoNo;
	
	public No(T conteudo){
		this.conteudo = conteudo;
		this.proximoNo = null;
	}
	
	get e set (recebe e retornam tipo generico T)
	public No<T> getProximoNo() {
		return proximoNo;
	}
	
	@Override
	public String toString(){
		return "Conteudo: " + this.getConteudo;
	}
	
	public String toStringEncadeado() {
		String str = "No{" + this.conteudo + "}";
		
		if(this.proximoNo != null){
			str += "->" + this.proximoNo.toString();
		}else{
			str += "->null";
		}
		return str;
	}
}

public class Main{
	public static void main(String[] args){
	
		No<String> no1 = new No<>('conteudo no1');
		No<String> no2 = new No<>('conteudo no2');
		
		//encadeamento do no1 com no2
		no1.setProximoNo(no2);
		
		No<String> no3 = new No<>('conteudo no3');
		no2.setProximoNo(no3);
		
		No<String> no4 = new No<>('conteudo no4');
		no3.setProximoNo(no4);
		
		System.out.println(no1);
		System.out.println(no1.getProximoNo());
		
		System.out.println(no1);
		System.out.println(no1.getProximoNo());
		System.out.println(no1.getProximoNo().getProximoNo().getProximoNo());
		System.out.println(no1.getProximoNo().getProximoNo().getProximoNo().getProximoNo());
		
		//testar esta implementacao feita pelo professor no repositorio
		System.out.println(no1.toStringEncadeado());
		System.out.println(no2.toStringEncadeado());
		System.out.println(no3.toStringEncadeado());
		System.out.println(no4.toStringEncadeado());
	}
}

repositorio com os slides e codigos dessas aulas
https://github.com/jrdutra/estruturaDeDadosJavaDio/tree/main/apresentacoes/Aula1
