Recomendação de leitura, livro escrito pelo professor e publicado pela casa do código: 
https://www.casadocodigo.com.br/products/livro-oo-conceitos

---
esse curso deveria vir antes de estruturas de dados, a ordem em que
as aulas foram distribuidas no curso não pode ser seguida de forma
linear, como foi dito pelo Renan Oliveira (SEO da Dio?).
---


percurso do curso:
- por que usar?
- fundamentos
- estrutura
- relações (herança, associação, interface)
- pacotes


requisitos:
- logica de programacao
- vontade de aprender (isso não me falta)


PE vs OO
- PE: foca mais no "como fazer"
- OO: foca mais no "o que fazer"

Gap semantico é a diferença entre representacoes


Exercicio 1:
Levando em consideracao uma loja on-line de livros,
modele uma entidade livro.

-autor
-assunto
-titulo
-isbn
-quantidade de paginas
-editora

faça as coisas pensando no presente e não no futuro, pois você
pode desenvolver coisas que nem serão utilizadas




*** Estrutura básica ***

conceitos basicos da oo:
-classe
-atributo
-metodo
-objeto
-mensagem

uma classe deve:
-substantivos
-nomes signifcativos
-contexto deve ser considerado




Exercicio 2:
Criar a classe "Carro"

class Carro {}




Exericio 3:
evolua o exercicio 2 e defina 3 atributos para sua classe
"Carro: cor, modelo e capacidade do tanque.

class Carro {
	String cor;
	String modelo;
	int capacidadeTanque;
}




** metodos **

sobrecarca: mudar assinatura de acordo coma necessidade
- assinatura: nome + parametros

m1()
m1(int i)
m1(float f)
m1(String s, long l)
m1(long l, String s)

evolua o conceito do exercicio 3 e defina 1 metodo para calcular o 
valor total para preencher o tanque. este deve receber como parametro
o valor da gasolina. faça também duas sobrecargas do construtor.


class Carro {
	String cor;
	String modelo;
	int capacidadeTanque;
	
	// construtor padrão, vazio.
	Carro(){}
	
	// sobrecarrega do construtor
	Carro(String cor, String modelo, int capacidadeTanque){
		this.cor = cor;
		this.modelo = modelo;
		this.capacidadeTanque = capacidadeTanque;
	}
	
	// metodos acessorios (encapsulamento)
	String getCor(){
		return cor;
	}
	void setCor(String cor){
		this.cor = cor;
	}
	
	String getModelo(){
		return modelo;
	}
	void setModelo(String modelo){
		this.modelo = modelo;
	}
	
	int getCapacidadeTanque(){
		return capacidadeTanque;
	}
	void setCapacidadeTanque(int capacidadeTanque){
		this.capacidadeTanque = capacidadeTanque;
	}
	
	double totalValorTanque(double valorCombustivel){
		return this.capacidadeTanque * valorCombustivel;
	}
}





** objeto **

// cria objeto usando construtor padrão
Carro carro = new Carro();

// cria objeto usando construtor sobrecarregado
Carro carro = new Carro("Azul", "Gol", 25);

// enviando mensagem, isso eh feito através de metodos
carro.<metodo>;
carro.getCor(); // Azul

Instancia x Estático atributos e metodos (memoria)
estado de um objeto
identidade de um objeto
represetnação numerica de um objeto
representacao padrao de um objeto




Exercicio 4:
evolua o conceito do exercicio 3 criando objetos da classe "Carro".
use os metodos get/set, quando aplicaveis, para definir os valores
dos atributos e exibir seus valores. passe também mensagenm para
o calculo do total para encher o tanque.

// cria uma instancia usando construtor padrao
Carro carro = new Carro();

// define valores para os atributos atraves dos metodos (set)
carro.setCor("Amarelo");
carro.setModelo("Gol");
carro.setCapacidadeTanque(23);

// exibe valores dos atributos atraves dos metodos (get)
System.out.println( carro.getCor() );
System.out.println( carro.getModelo() );
System.out.println( carro.getCapacidadeTanque() );

// calcula e exibe valor total
System.out.println( carro.totalValorTanque(5.3) );



// cria uma instancia usando sobrecarga do construtor
Carro carro2 = new Carro("Vermelho", "Volksvagem", 32);

// exibe valores dos atributos atraves dos metodos (get)
System.out.println( carro2.getCor() );
System.out.println( carro2.getModelo() );
System.out.println( carro2.getCapacidadeTanque() );

// calcula e exibe valor total para encher o tanque
System.out.println( carro2.totalValorTanque(7.6) );




*** relacoes ***

relacao de:
 - heranca: cria subtipos mais especializados
 - associacao
 - interface


heranca <---------------------------------------

class A extends B {}

Exercicio 1:

criar a classe Veiculo, Carro, moto e Caminhao

class Veiculo {
	// atributos e metodos
}

class Carro extends Veiculo {}
class Moto extends Veiculo {}
class Caminhao extends Veiculo {}


tipos de herança:
 - simples: tem apenas uma classe mãe
 - multipla: tem mais de uma classe mãe

java não tem herança multipla, python, c++ tem.

java não tem heranpa multipla para evitar problema 
do diamante ou conflito de nomes:
 -ter atributos e metodos com mesmo nome



Upcast e Downcast <---------------------------------------

Upcast: pega a classe filha e transforma na mae (usar sempre que possivel)

considerando que B é filho de A
não precisa ser explicito
A a = new B();


Downcast: pega a classe mae e transforma na filha (evitar uso)

considerando que B é filho de A
precisa ser explicito
B a = (B) new A();



Polimorfismo e Sobrecarga <---------------------------------------

Polimorfismo: "a mesma ação se comportando diferente"

Pagamento
 - processar()

Boleto
 - processar()


Sobrescrita: "a mesma acao podendo se comportar diferente"

a classe filha sobrescreve um metodo quando acrescenta ou
executa de uma forma diferente do metodo implementado na
classe mae. eh uma diferença filosofica.


Exercicio:
crie as classes funcionario, gerente, vendedor e faxineiro.
realize upcasts e downcasts

class Funcionario {}

class Gerente extends Funcionario {}
class Vendedor extends Funcionario {}
class Faxineiro extends Funcionario {}

Funcionario func = new Funcionario(); // instancia padrao

//instancia do tipo upcast (implicito)
//existem coisas em gerente que tem em funcionario, nada se perde (use muito)
Funcionario gerente = new Gerente();
Funcionario vendedor = new Vendedor();
Funcionario faxineiro = new Faxineiro();

//instancia do tipo downcast (explicito)
//nem tudo que esta em gerente estara em funcionario (ClassCastException)
//downcast deve ser evitado
//aplicando isso aos tipos primitivos...
Gerente gerente = (Gerente) new Funcionario();
Vendedor vendedor = (Vendedor) new Funcionario();



Entendendo Polimorfismo e Sobrecarga

class ClasseMae {
	void metodo1() {
		"metodo 1 da classe mae";
	}
	void metodo2() {
		"metodo 2 da classe mae";
	}
}

class ClasseFilha1 extends ClasseMae {
	@Override
	void metodo1() {
		"metodo 2 da classe filha"
	}
}

class ClasseFilha2 extends ClasseMae {
	@Override
	void metodo1(){
		"metodo 1 da classe filha 2"
	}
	@Override
	void metodo2(){
		"metodo 2 da classe filha 2"
	}
}

class Main {

//vetor do tipo ClasseMae que armazena objetos
//sempre trabalhar com tipo da classe mae com instancias da classe filha,
//o que nao aconteceu no item da posicao 2

	ClasseMae[] classes = new ClasseMae[]{
		new ClasseFilha1(), 
		new ClasseFilha2(), 
		new ClasseMae()
	};
	
	for(ClasseMae classe : classes) { //for-each
		classe.metodo1();
	}
	
	for(ClasseMae classe : classes) { //for-each
		classe.metodo2();
	}
	
	//aqui acontece a sobrescrita
	ClasseFilha2 classeFilha2 = new ClasseFilha2();
	classeFilha2.metodo2();
}




associação <---------------------------------------

tipos
  - estrutural
    - composicao
    - agregacao
  - comportamental
    - dependencia

estrutural
  - composicao: "com parte todo"
    ex.: pessoa e endereco
   

se pessoa deixar de existir, endereço também não existirá,
endereço depende de pessoa para existir

class Pessoa {
	Endereco endereco;
}

estrutural
  - agregacao: "sem parte todo"
    ex.: disciplina e aluno

class Disciplina {
	Aluno aluno;
}


agregacao x composicao

composicao: um existe se outro existir
agregacao: um existe de forma independente, nao depende do outro


comportamental
  - dependencia: "depende de"

estará nos métodos, ja que é algo comportamental...
ha uma dependencia comportamental, o metodo depende de uma entidade

class Compra {
	finalizar(Cupom cupom){
	}
}


heranca x associacao

associacao pode mudar valores
heranca nao, uma vez feita nao muda do decorrer da execucao do sistema
uma coisa é a outra? heranca, é um
uma coisa nao é a outra? associacao, vai usar

exercicio:
apenas para praticar, codifique os exemplos dos slides anteriores sobre 
as associações.

//uma pessoa é composta por um endereço
class Pessoa {
	Endereco endereco;
}

//associação
class Disciplina {
	Aluno aluno;
}

//comportamental
class Compra {
	
	void finalizar(Cupom cupom){
		
	}
}

class Cupom {

}

